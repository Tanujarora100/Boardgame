name: CI/CD Pipeline for Java Application

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  DOCKER_IMAGE: boardgame

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 11
      uses: actions/setup-java@v4
      with:
        java-version: "11"
        distribution: "temurin"
    - name: Build and test with Maven
      run: mvn clean test package
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
    - name: OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      id: dependency-check
      env:
        JAVA_HOME: /opt/jdk
      with:
        project: 'database_service_project'
        path: '.'
        format: 'HTML'
        out: 'reports'
    - name: Upload Test results
      uses: actions/upload-artifact@master
      with:
        name: OWASP Dependency Check Report
        path: ${{github.workspace}}/reports

    # - name: Send the OWASP Dependency Check Report
    #   uses: dawidd6/action-send-mail@v3
    #   with:
    #     server_address: smtp.gmail.com
    #     server_port: 587
    #     username: ${{ secrets.EMAIL_USERNAME }}
    #     password: ${{ secrets.EMAIL_PASSWORD }}
    #     subject: OWASP Dependency Check Report
    #     body: OWASP Dependency Check Report
    #     to: ${{env.EMAIL_TO}}
    #     from: ${{secrets.EMAIL_FROM}}
    #     body_format: html
    #     attachments: reports/OWASP Dependency Check Report
    - name: Upload JAR
      uses: actions/upload-artifact@v3
      with:
        name: database_jar
        path: target/*.jar

  sonarqube-analysis:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    - name: SonarQube Scan
      uses: sonarsource/sonarqube-scan-action@master
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

  docker-build-and-scan:
    needs: sonarqube-analysis
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Download JAR
      uses: actions/download-artifact@v3
      with:
        name: database_jar
        path: target
    - name: Build Docker image
      run: |
        docker build -t boardgame/${{github.sha}} .
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'boardgame/${{github.sha}}'
        format: "sarif"
        output: "trivy-results.sarif"
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: "trivy-results.sarif"

  publish:
    needs: docker-build-and-scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Download JAR
      uses: actions/download-artifact@v3
      with:
        name: database_jar
        path: target
    - name: Push to Docker Hub
      run: |
        docker build -t tanujarora27/boardgame:${{ github.sha }} .
        docker tag tanujarora27/boardgame:${{ github.sha }} tanujarora27/boardgame:latest
        docker push tanujarora27/boardgame:latest
    - name: Publish to Nexus
      uses: sonatype-nexus-community/nexus-repo-github-action@master
      with:
        serverUrl: http://20.55.106.40:8085
        username: ${{ env.NEXUS_USERNAME }}
        password: ${{ secrets.NEXUS_PASSWORD }}
        format: maven2
        repository: maven-releases
        coordinates: groupId=com.javaproject artifactId=database_service_project version=0.0.4
        assets: extension=jar
        filename: ./target/database_service_project-0.0.4.jar
